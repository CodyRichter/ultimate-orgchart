import type { Query } from 'mongoose';
import type { DocumentType, EmptyVoidFn } from './types';
declare type NDA<T> = number | DocumentType<T> | DocumentType<T>[];
declare type ReturnVoid = void | Promise<void>;
declare type HookNextErrorFn = (err?: Error) => ReturnVoid;
declare type PreFnWithDocumentType<T> = (this: DocumentType<T>, next: HookNextErrorFn) => ReturnVoid;
declare type PreFnWithQuery<T> = (this: Query<T>, next: (error?: Error) => ReturnVoid, done: EmptyVoidFn) => ReturnVoid;
declare type ModelPostFn<T> = (result: any, next: EmptyVoidFn) => ReturnVoid;
declare type PostNumberResponse<T> = (result: number, next: EmptyVoidFn) => ReturnVoid;
declare type PostSingleResponse<T> = (result: DocumentType<T>, next: EmptyVoidFn) => ReturnVoid;
declare type PostMultipleResponse<T> = (result: DocumentType<T>[], next: EmptyVoidFn) => ReturnVoid;
declare type PostRegExpResponse<T> = (result: NDA<T>, next: EmptyVoidFn) => ReturnVoid;
declare type PostArrayResponse<T> = (result: NDA<T>, next: EmptyVoidFn) => ReturnVoid;
declare type PostNumberWithError<T> = (error: Error, result: number, next: HookNextErrorFn) => ReturnVoid;
declare type PostSingleWithError<T> = (error: Error, result: DocumentType<T>, next: HookNextErrorFn) => ReturnVoid;
declare type PostMultipleWithError<T> = (error: Error, result: DocumentType<T>[], next: HookNextErrorFn) => ReturnVoid;
declare type PostRegExpWithError<T> = (error: Error, result: NDA<T>, next: HookNextErrorFn) => ReturnVoid;
declare type PostArrayWithError<T> = (error: Error, result: NDA<T>, next: EmptyVoidFn) => ReturnVoid;
declare type DocumentMethod = 'init' | 'validate' | 'save' | 'remove';
declare type NumberMethod = 'count';
declare type SingleMethod = 'findOne' | 'findOneAndRemove' | 'findOneAndUpdate' | 'findOneAndDelete' | 'deleteOne' | DocumentMethod;
declare type MultipleMethod = 'find' | 'update' | 'deleteMany';
declare type QueryMethod = 'count' | 'countDocuments' | 'estimatedDocumentCount' | 'find' | 'findOne' | 'findOneAndRemove' | 'findOneAndUpdate' | 'update' | 'updateOne' | 'updateMany' | 'findOneAndDelete' | 'deleteOne' | 'deleteMany';
declare type ModelMethod = 'insertMany';
declare type QMR = QueryMethod | ModelMethod | RegExp;
declare type QDM = QMR | DocumentMethod;
declare type DR = DocumentMethod | RegExp;
export declare const pre: {
    <T>(method: DR | DR[], fn: PreFnWithDocumentType<T>): ClassDecorator;
    <T_1>(method: QMR | QMR[], fn: PreFnWithQuery<T_1>): ClassDecorator;
};
export declare const post: {
    <T>(method: RegExp, fn: PostRegExpResponse<T>): ClassDecorator;
    <T_1>(method: RegExp, fn: PostRegExpWithError<T_1>): ClassDecorator;
    <T_2>(method: QDM[], fn: PostArrayResponse<T_2>): ClassDecorator;
    <T_3>(method: QDM[], fn: PostArrayWithError<T_3>): ClassDecorator;
    <T_4>(method: NumberMethod, fn: PostNumberResponse<T_4>): ClassDecorator;
    <T_5>(method: NumberMethod, fn: PostNumberWithError<T_5>): ClassDecorator;
    <T_6>(method: SingleMethod, fn: PostSingleResponse<T_6>): ClassDecorator;
    <T_7>(method: SingleMethod, fn: PostSingleWithError<T_7>): ClassDecorator;
    <T_8>(method: MultipleMethod, fn: PostMultipleResponse<T_8>): ClassDecorator;
    <T_9>(method: MultipleMethod, fn: PostMultipleWithError<T_9>): ClassDecorator;
    <T_10>(method: ModelMethod, fn: ModelPostFn<T_10> | PostMultipleResponse<T_10>): ClassDecorator;
};
export declare const Pre: {
    <T>(method: DR | DR[], fn: PreFnWithDocumentType<T>): ClassDecorator;
    <T_1>(method: QMR | QMR[], fn: PreFnWithQuery<T_1>): ClassDecorator;
};
export declare const Post: {
    <T>(method: RegExp, fn: PostRegExpResponse<T>): ClassDecorator;
    <T_1>(method: RegExp, fn: PostRegExpWithError<T_1>): ClassDecorator;
    <T_2>(method: QDM[], fn: PostArrayResponse<T_2>): ClassDecorator;
    <T_3>(method: QDM[], fn: PostArrayWithError<T_3>): ClassDecorator;
    <T_4>(method: NumberMethod, fn: PostNumberResponse<T_4>): ClassDecorator;
    <T_5>(method: NumberMethod, fn: PostNumberWithError<T_5>): ClassDecorator;
    <T_6>(method: SingleMethod, fn: PostSingleResponse<T_6>): ClassDecorator;
    <T_7>(method: SingleMethod, fn: PostSingleWithError<T_7>): ClassDecorator;
    <T_8>(method: MultipleMethod, fn: PostMultipleResponse<T_8>): ClassDecorator;
    <T_9>(method: MultipleMethod, fn: PostMultipleWithError<T_9>): ClassDecorator;
    <T_10>(method: ModelMethod, fn: ModelPostFn<T_10> | PostMultipleResponse<T_10>): ClassDecorator;
};
export {};
