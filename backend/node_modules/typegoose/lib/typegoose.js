"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
require("reflect-metadata");
const util_1 = require("util");
const data_1 = require("./data");
__export(require("./method"));
__export(require("./prop"));
__export(require("./hooks"));
__export(require("./plugin"));
__export(require("."));
__export(require("./typeguards"));
var utils_1 = require("./utils");
exports.getClassForDocument = utils_1.getClassForDocument;
util_1.deprecate(() => undefined, 'This Package got moved, please use `@hasezoey/typegoose` | github:hasezoey/typegoose')();
class Typegoose {
    getModelForClass(t, { existingMongoose, schemaOptions, existingConnection } = {}) {
        const name = this.constructor.name;
        if (!data_1.models[name]) {
            this.setModelForClass(t, {
                existingMongoose,
                schemaOptions,
                existingConnection,
            });
        }
        return data_1.models[name];
    }
    setModelForClass(t, { existingMongoose, schemaOptions, existingConnection } = {}) {
        const name = this.constructor.name;
        const sch = this.buildSchema(t, { existingMongoose, schemaOptions });
        let model = mongoose.model.bind(mongoose);
        if (existingConnection) {
            model = existingConnection.model.bind(existingConnection);
        }
        else if (existingMongoose) {
            model = existingMongoose.model.bind(existingMongoose);
        }
        data_1.models[name] = model(name, sch);
        data_1.constructors[name] = this.constructor;
        return data_1.models[name];
    }
    buildSchema(t, { schemaOptions } = {}) {
        const name = this.constructor.name;
        let sch = _buildSchema(t, name, schemaOptions);
        let parentCtor = Object.getPrototypeOf(this.constructor.prototype).constructor;
        while (parentCtor && parentCtor.name !== 'Typegoose' && parentCtor.name !== 'Object') {
            sch = _buildSchema(t, parentCtor.name, schemaOptions, sch);
            parentCtor = Object.getPrototypeOf(parentCtor.prototype).constructor;
        }
        return sch;
    }
}
exports.Typegoose = Typegoose;
function _buildSchema(t, name, schemaOptions, sch) {
    const Schema = mongoose.Schema;
    if (!sch) {
        sch = schemaOptions ? new Schema(data_1.schema[name], schemaOptions) : new Schema(data_1.schema[name]);
    }
    else {
        sch.add(data_1.schema[name]);
    }
    const staticMethods = data_1.methods.staticMethods[name];
    if (staticMethods) {
        sch.statics = Object.assign(staticMethods, sch.statics || {});
    }
    else {
        sch.statics = sch.statics || {};
    }
    const instanceMethods = data_1.methods.instanceMethods[name];
    if (instanceMethods) {
        sch.methods = Object.assign(instanceMethods, sch.methods || {});
    }
    else {
        sch.methods = sch.methods || {};
    }
    if (data_1.hooks[name]) {
        data_1.hooks[name].pre.forEach(preHookArgs => {
            sch.pre(...preHookArgs);
        });
        data_1.hooks[name].post.forEach(postHookArgs => {
            sch.post(...postHookArgs);
        });
    }
    if (data_1.plugins[name]) {
        for (const plugin of data_1.plugins[name]) {
            sch.plugin(plugin.mongoosePlugin, plugin.options);
        }
    }
    const getterSetters = data_1.virtuals[name];
    if (getterSetters) {
        for (const key of Object.keys(getterSetters)) {
            if (getterSetters[key].options && getterSetters[key].options.overwrite) {
                sch.virtual(key, getterSetters[key].options);
            }
            else {
                if (getterSetters[key].get) {
                    sch.virtual(key, getterSetters[key].options).get(getterSetters[key].get);
                }
                if (getterSetters[key].set) {
                    sch.virtual(key, getterSetters[key].options).set(getterSetters[key].set);
                }
            }
        }
    }
    const indices = Reflect.getMetadata('typegoose:indices', t) || [];
    for (const index of indices) {
        sch.index(index.fields, index.options);
    }
    return sch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWdvb3NlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVnb29zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHFDQUFxQztBQUNyQyw0QkFBMEI7QUFFMUIsK0JBQWlDO0FBQ2pDLGlDQUF5RjtBQUd6Riw4QkFBeUI7QUFDekIsNEJBQXVCO0FBQ3ZCLDZCQUF3QjtBQUN4Qiw4QkFBeUI7QUFDekIsdUJBQWtCO0FBQ2xCLGtDQUE2QjtBQUM3QixpQ0FBOEM7QUFBckMsc0NBQUEsbUJBQW1CLENBQUE7QUFFNUIsZ0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsc0ZBQXNGLENBQUMsRUFBRSxDQUFDO0FBaUJySCxNQUFhLFNBQVM7SUFZYixnQkFBZ0IsQ0FDckIsQ0FBSSxFQUNKLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixLQUE4QixFQUFFO1FBRXJGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRTtnQkFDdkIsZ0JBQWdCO2dCQUNoQixhQUFhO2dCQUNiLGtCQUFrQjthQUNuQixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sYUFBTSxDQUFDLElBQUksQ0FBd0IsQ0FBQztJQUM3QyxDQUFDO0lBWU0sZ0JBQWdCLENBQ3JCLENBQUksRUFDSixFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsS0FBOEIsRUFBRTtRQUVyRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUVuQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFJLENBQUMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFFeEUsSUFBSSxLQUFLLEdB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