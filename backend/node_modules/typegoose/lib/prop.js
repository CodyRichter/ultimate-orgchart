"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const util_1 = require("util");
const data_1 = require("./data");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
var WhatIsIt;
(function (WhatIsIt) {
    WhatIsIt["ARRAY"] = "Array";
    WhatIsIt["MAP"] = "Map";
    WhatIsIt["NONE"] = "";
})(WhatIsIt || (WhatIsIt = {}));
function isWithStringValidate(options) {
    return !util_1.isNullOrUndefined(options.match
        || options.enum
        || options.minlength
        || options.maxlength);
}
function isWithStringTransform(options) {
    return !util_1.isNullOrUndefined(options.lowercase || options.uppercase || options.trim);
}
function isWithNumberValidate(options) {
    return !util_1.isNullOrUndefined(options.min || options.max);
}
function baseProp(rawOptions, Type, target, key, whatis = WhatIsIt.NONE) {
    const name = target.constructor.name;
    const isGetterSetter = Object.getOwnPropertyDescriptor(target, key);
    if (isGetterSetter) {
        if (isGetterSetter.get) {
            if (!data_1.virtuals[name]) {
                data_1.virtuals[name] = {};
            }
            if (!data_1.virtuals[name][key]) {
                data_1.virtuals[name][key] = {};
            }
            data_1.virtuals[name][key] = Object.assign({}, data_1.virtuals[name][key], { get: isGetterSetter.get, options: rawOptions });
        }
        if (isGetterSetter.set) {
            if (!data_1.virtuals[name]) {
                data_1.virtuals[name] = {};
            }
            if (!data_1.virtuals[name][key]) {
                data_1.virtuals[name][key] = {};
            }
            data_1.virtuals[name][key] = Object.assign({}, data_1.virtuals[name][key], { set: isGetterSetter.set, options: rawOptions });
        }
        return;
    }
    if (whatis === WhatIsIt.ARRAY) {
        utils_1.initAsArray(name, key);
    }
    else {
        utils_1.initAsObject(name, key);
    }
    const ref = rawOptions.ref;
    if (typeof ref === 'string') {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { type: mongoose.Schema.Types.ObjectId, ref });
        return;
    }
    else if (ref) {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { type: mongoose.Schema.Types.ObjectId, ref: ref.name });
        return;
    }
    const itemsRef = rawOptions.itemsRef;
    if (typeof itemsRef === 'string') {
        data_1.schema[name][key][0] = Object.assign({}, data_1.schema[name][key][0], { type: mongoose.Schema.Types.ObjectId, ref: itemsRef });
        return;
    }
    else if (itemsRef) {
        data_1.schema[name][key][0] = Object.assign({}, data_1.schema[name][key][0], { type: mongoose.Schema.Types.ObjectId, ref: itemsRef.name });
        return;
    }
    const refPath = rawOptions.refPath;
    if (refPath && typeof refPath === 'string') {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { type: mongoose.Schema.Types.ObjectId, refPath });
        return;
    }
    const itemsRefPath = rawOptions.itemsRefPath;
    if (itemsRefPath && typeof itemsRefPath === 'string') {
        data_1.schema[name][key][0] = Object.assign({}, data_1.schema[name][key][0], { type: mongoose.Schema.Types.ObjectId, refPath: itemsRefPath });
        return;
    }
    const enumOption = rawOptions.enum;
    if (enumOption) {
        if (!Array.isArray(enumOption)) {
            rawOptions.enum = Object.keys(enumOption).map(propKey => enumOption[propKey]);
        }
    }
    const selectOption = rawOptions.select;
    if (typeof selectOption === 'boolean') {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { select: selectOption });
    }
    if (isWithStringValidate(rawOptions) && !utils_1.isString(Type)) {
        throw new errors_1.NotStringTypeError(key);
    }
    if (isWithNumberValidate(rawOptions) && !utils_1.isNumber(Type)) {
        throw new errors_1.NotNumberTypeError(key);
    }
    if (isWithStringTransform(rawOptions) && !utils_1.isString(Type)) {
        throw new errors_1.NotStringTypeError(key);
    }
    const instance = new Type();
    const subSchema = data_1.schema[instance.constructor.name];
    if (!subSchema && !utils_1.isPrimitive(Type) && !utils_1.isObject(Type)) {
        throw new errors_1.InvalidPropError(Type.name, key);
    }
    const { ['ref']: r, ['items']: i, ['of']: o } = rawOptions, options = __rest(rawOptions, ['ref', 'items', 'of']);
    if (utils_1.isPrimitive(Type)) {
        if (whatis === WhatIsIt.ARRAY) {
            data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key][0], options, { type: [Type.name === 'ObjectID' ? 'ObjectId' : Type] });
            return;
        }
        if (whatis === WhatIsIt.MAP) {
            const { mapDefault } = options;
            delete options.mapDefault;
            data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { type: Map, default: mapDefault, of: Object.assign({ type: Type }, options) });
            return;
        }
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], options, { type: Type });
        return;
    }
    if (utils_1.isObject(Type) && !subSchema) {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], options, { type: Object });
        return;
    }
    if (whatis === WhatIsIt.ARRAY) {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key][0], options, { type: [Object.assign({}, (typeof options._id !== 'undefined' ? { _id: options._id } : {}), subSchema)] });
        return;
    }
    if (whatis === WhatIsIt.MAP) {
        data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], { type: Map }, options);
        data_1.schema[name][key].of = Object.assign({}, data_1.schema[name][key].of, subSchema);
        return;
    }
    const Schema = mongoose.Schema;
    const supressSubschemaId = rawOptions._id === false;
    const virtualSchema = new Schema(Object.assign({}, subSchema), supressSubschemaId ? { _id: false } : {});
    const schemaInstanceMethods = data_1.methods.instanceMethods[instance.constructor.name];
    if (schemaInstanceMethods) {
        virtualSchema.methods = schemaInstanceMethods;
    }
    data_1.schema[name][key] = Object.assign({}, data_1.schema[name][key], options, { type: virtualSchema });
    return;
}
function prop(options = {}) {
    return (target, key) => {
        const Type = Reflect.getMetadata('design:type', target, key);
        if (!Type) {
            throw new errors_1.NoMetadataError(key);
        }
        baseProp(options, Type, target, key, WhatIsIt.NONE);
    };
}
exports.prop = prop;
function mapProp(options) {
    return (target, key) => {
        const Type = options.of;
        baseProp(options, Type, target, key, WhatIsIt.MAP);
    };
}
exports.mapProp = mapProp;
function arrayProp(options) {
    return (target, key) => {
        const Type = options.items;
        baseProp(options, Type, target, key, WhatIsIt.ARRAY);
    };
}
exports.arrayProp = arrayProp;
//# sourceMappingURL=data:application/json;base64,